# reference: https://github.com/stan-dev/stan/releases/download/v2.14.0/stan-reference-2.14.0.pdf
# we can only extract computation type from the names
# to determine the data type, need to track the arguments' data type

# split based on complexity of computation
# read value
# basic computation: the functional units that CPUs have, e.g. +-*/
# complex computation: log, power, etc
function_type = {
  "arithmetic": "basic", # all types
  "logical": "basic",       # all types
  "absolute": "basic",
  "integer":  "basic",
  "real": "basic",
  "integer bound": "basic",
  "const": "read",
  "special value": "read",
  "log probability": "complex",
  "round": "basic",
  "power": "complex",
  "log": "complex",
  "trigonometric": "complex",
  "link": "complex",
  "prob": "complex",
  "composed": "complex",
  "log_sum_exp":"complex",
  "reduction": "basic",
  "size": "read",
  "array size": "read",
  "array sort": "basic",
  "matrix size": "read",
  "elementwise": "basic",
  "transpose": "basic",
  "dot": "basic",
  "specialized": "complex",
  "replicate": "basic",
  "matrix": "basic",
  "sparse matrix": "basic",
  "matrix sort": "basic",
  "matrix slicing": "basic",
  "matrix concat": "basic",
  "matrix special": "basic",
  "linear algebra": "basic",
  "mixed": "basic",
  "ODE solver": "complex"
}

functions = {
  "+": "arithmetic", 
  "-": "arithmetic", 
  "*": "arithmetic", 
  "/": "arithmetic", 
  "\\": "arithmetic", # matrix left division 
  "%": "arithmetic",
  "abs": "absolute", 
  "int_step": "integer", 
  "min": "integer bound",
  "max": "integer bound",
  "pi": "const",
  "e": "const",
  "sqrt2": "const",
  "log2": "const",
  "log10": "const",
  "not_a_number": "special value",
  "positive_infinity": "special value",
  "negative_infinity": "special value",
  "machine_precision": "special value",
  "target": "log probability",   # returns the current value of the log probability accumulator
  "get_lp": "log probability",
  "<": "logical",
  "<=": "logical",
  ">": "logical",
  ">=": "logical",
  "==": "logical",
  "!=": "logical",
  "!": "logical",
  "&&": "logical",
  "||": "logical",
  "step": "logical", 
  "is_inf": "logical", 
  "is_nan": "logical",
  "^": "arithmetic",
  "fabs": "absolute",
  "fdim": "real",
  "fmin": "real",
  "fmax": "real",
  "fmod": "real",
  "floor": "round", 
  "ceil": "round",
  "round": "round",
  "trunc": "round",
  "sqrt": "power",
  "cbrt": "power",
  "square": "power",
  "exp": "power",
  "exp2": "power",
  "log": "log",
  "log2": "log",
  "log10": "log",
  "pow": "power",
  "inv": "power",
  "inv_sqrt": "power",
  "inv_square": "power",
  "hypot": "trigonometric",
  "cos": "trigonometric",
  "sin": "trigonometric",
  "tan": "trigonometric",
  "acos": "trigonometric",
  "asin": "trigonometric",
  "atan": "trigonometric",
  "atan2": "trigonometric",
  "cosh": "trigonometric",
  "sinh": "trigonometric",
  "tanh": "trigonometric",
  "acosh": "trigonometric",
  "asinh": "trigonometric",
  "atanh": "trigonometric",
  "logit": "link", 
  "inv_logit": "link",
  "inv_cloglog": "link",
  "erf": "prob", 
  "erfc": "prob",
  "Phi": "prob",
  "inv_Phi": "prob",
  "Phi_approx": "prob",
  "binary_log_loss": "prob",
  "owens_t": "prob",
  "inc_beta": "prob",
  "lbeta": "prob",
  "tgamma": "prob",
  "lgamma": "prob",
  "digamma": "prob",
  "trigamma": "prob",
  "lmgamma": "prob",
  "gamma_p": "prob",
  "gamma_q": "prob",
  "binomial_coefficient_log": "prob",
  "choose": "prob",
  "bessel_first_kind": "prob",
  "bessel_second_kind": "prob",
  "modified_bessel_first_kind": "prob",
  "modified_bessel_second_kind": "prob",
  "falling_factorial": "prob",
  "lchoose": "prob",
  "log_falling_factorial": "prob",
  "rising_factorial": "prob",
  "log_rising_factorial": "prob",
  "expml": "composed", 
  "fma": "composed",
  "multiply_log": "composed",
  "lmultiply": "composed",
  "loglp": "composed",
  "loglm": "composed",
  "log1p_exp": "composed",
  "log1m_exp": "composed",
  "log_diff_exp": "composed",
  "log_mix": "composed",
  "log_sum_exp": "log_sum_exp",
  "log_inv_logit": "composed",
  "log1m_inv_logit": "composed",
  "min": "reduction",
  "max": "reduction",
  "sum": "reduction",
  "prod": "reduction",
  #"log_sum_exp": "reduction",
  "mean": "reduction",
  "variance": "reduction",
  "sd": "reduction",
  "distance": "reduction",
  "squared_distance": "reduction",
  "dims": "array size",
  "num_elements": "size",
  "size": "array size",
  "rep_array": "array rep", 
  "sort_asc": "array sort",
  "sort_desc": "array sort",
  "sort_indices_asc": "array sort",
  "sort_indices_desc": "array sort",
  "rank": "array sort",
  "rows": "matrix size",
  "cols": "martix size",
  ".*": "elementwise",
  "./": "elementwise",
  "'": 'transpose',
  "dot_product": "dot",
  "columns_dot_product": "dot",
  "rows_dot_product": "dot",
  "dot_self": "dot",
  "columns_dot_self": "dot",
  "rows_dot_self": "dot",
  "tcrossprod": "specialized",
  "crossprod": "specialized",
  "quad_form": "specialized",
  "quad_form_diag": "specialized",
  "quad_form_sym": "specialized",
  "trace_quad_form": "specialized",
  "trace_gen_quad_form": "specialized",
  "multiply_lower_tri_self_transpose": "specialized",
  "diag_pre_multiply": "specialized",
  "diag_post_multiply": "specialized",
  "rep_vector": "replicate",
  "rep_row_vector": "replicate",
  "rep_matrix": "replicate",
  "diagonal": "matrix",
  "diag_matrix": "matrix",
  "col": "matrix slicing",
  "row": "matrix slicing",
  "block": "matrx slicing",
  "sub_col": "matrix slicing",
  "sub_row": "matrix slicing",
  "head": "matrix slicing",
  "tail": "matrix slicing",
  "segment": "matrix slicing",
  "append_col": "matrix concat",
  "append_row": "matrix concat",
  "softmax": "matrix special",
  "log_softmax": "matrix special",
  "cumulative_sum": "matrix special",
  "cov_exp_quad": "matrix special",
  "mdivide_left_tri_low": "linear algebra",
  "mdivide_right_tri_low": "linear algebra",
  "mdivide_left_spd": "linear algebra",
  "mdivide_right_spd": "linear algebra",
  "matrix_exp": "linear algebra",
  "trace": "linear algebra",
  "determinant": "linear algebra",
  "log_determinant": "linear algebra",
  "inverse": "linear algebra",
  "inverse_spd": "linear algebra",
  "eigenvalues_sym": "linear algebra",
  "eigenvectors_sym": "linear algebra",
  "qr_Q": "linear algebra",
  "qr_R": "linear algebra",
  "cholesky_decompose": "linear algebra",
  "singular_values": "linear algebra",
  "sort_asc": "matrix sort",
  "sort_desc": "matrix sort",
  "sort_indices_asc": "matrix sort",
  "sort_indices_desc" : "matrix sort",
  "rank": "matrix sort",
  "csr_extract_w": "parse matrix",
  "csr_extract_v": "parse matrix",
  "csr_extract_u": "parse matrix",
  "csr_to_dense_matrix": "parse matrix",
  "csr_matrix_times_vector" : "parse matrix",
  "to_matrix": "mixed",
  "to_vector": "mixed",
  "to_row_vector": "mixed",
  "to_array_2d": "mixed",
  "to_array_1d": "mixed",
  "integrate_ode_rk45": "ODE solver",
  "integrate_ode": "ODE solver",
  "integrate_ode_bdf": "ODE solver"
  
}
